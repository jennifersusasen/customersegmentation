# -*- coding: utf-8 -*-
"""Kmeans(Customer Segmentation).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O7r9JOUML6SfUXQwm2LTCBx-siigh-6G
"""

# Import the necessary libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from scipy.spatial.distance import cdist

# Using Google Colab Upload Function
from google.colab import files
uploaded = files.upload()

# Read the CSV file
df = pd.read_csv('Mall_Customers.csv')

# Display the first 5 rows
df.head()

# Metadata of the dataset
df.info()

# Statistical description of the dataset
df.describe()

# Display the shape of the dataset 
df.shape

# Finding null values, we see that there aren't any
df.isnull().any()

# As we want to determine the groups the clustering forms, we could drop the CustomerID since that will not contribute to the outcome
df.drop(['CustomerID'], axis=1, inplace=True)

#To transform the dataset to have only numerical values
X = df.to_numpy()
labelencoder = LabelEncoder()
X[:, 0] = labelencoder.fit_transform(X[:, 0])

# Pairplot
sns.pairplot(pd.DataFrame(X, columns=df.columns))

# To determine the best value of k, we use the Elbow method. So we implement KMeans for K Values from 1 to 10 and plot Elbow Graph
inertias = []
distortions = []
prediction = pd.DataFrame()
for i in range(1, 11):
  kmeanModel = KMeans(n_clusters=i).fit(X)
  inertias.append(kmeanModel.inertia_)
  prediction[i]=kmeanModel.predict(X)
  distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_,'euclidean'), axis=1)) / X.shape[0])

fig, (ax1, ax2) = plt.subplots(1, 2)
ax1.plot(range(1,11), inertias, 'bx-')
ax1.set(xlabel='K Value', ylabel='Inertia')

ax2.plot(range(1,11), distortions, 'bx-')
ax2.set(xlabel='K Value', ylabel='Distortion')

"""With PCA"""

# Initialize PCA
pca = PCA(2)

pdf = pca.fit_transform(X)

pdf.shape

inertias_ = []
centroids = []
distortions_ = []
prediction_ = pd.DataFrame()
for i in range(1, 11):
  kmeanModel_ = KMeans(n_clusters=i).fit(pdf)
  inertias_.append(kmeanModel_.inertia_)
  prediction_[i]=kmeanModel_.predict(pdf)
  centroids.append(kmeanModel_.cluster_centers_)
  distortions_.append(sum(np.min(cdist(pdf, kmeanModel_.cluster_centers_,'euclidean'), axis=1)) / pdf.shape[0])

fig, (ax1, ax2) = plt.subplots(1, 2)
ax1.plot(range(1,11), inertias_, 'bx-')
ax1.set(xlabel='K Value', ylabel='Inertia')

ax2.plot(range(1,11), distortions_, 'bx-')
ax2.set(xlabel='K Value', ylabel='Distortion')

for i in range(1, 11):
  for j in range(i):
        points = np.array([pdf[l] for l in range(len(prediction_[i])) if prediction_[i][l] == j])
        plt.scatter(points[:, 0], points[:, 1], s=7)
  plt.scatter(centroids[i-1][:,0], centroids[i-1][:,1], marker='*', s=200, c='#050505')
  plt.show()

